#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""

import pytest
import sys
import os


def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏"""

    # –¢–µ—Å—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (–¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å)
    high_priority_tests = [
        'test_endpoints.py::TestScenario4Feed',
        'test_scenario1_registration.py',
        'test_scenario2_profile.py',
        'test_scenario3_login.py',
        'test_scenario5_events.py',
        'test_scenario7_organisations.py'
    ]

    # –¢–µ—Å—Ç—ã —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (–º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫–∏)
    low_priority_tests = [
        'test_scenario4_feed.py'
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    existing_high_priority = [f for f in high_priority_tests if os.path.exists(f)]
    existing_low_priority = [f for f in low_priority_tests if os.path.exists(f)]

    print(f"\n{'=' * 50}")
    print(f"üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í")
    print(f"üìä –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {len(existing_high_priority)} —Ñ–∞–π–ª–æ–≤")
    print(f"üìä –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {len(existing_low_priority)} —Ñ–∞–π–ª–æ–≤")
    print(f"{'=' * 50}")

    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if existing_high_priority:
        print("\nüéØ –í–´–°–û–ö–û–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –¢–ï–°–¢–´:")
        exit_code_high = pytest.main([
            *existing_high_priority,
            '-v',
            '--tb=short',
            '--color=yes'
        ])
    else:
        exit_code_high = 0

    # –ó–∞—Ç–µ–º –Ω–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ (–µ—Å–ª–∏ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø—Ä–æ—à–ª–∏)
    if existing_low_priority and exit_code_high == 0:
        print("\nüìù –ù–ò–ó–ö–û–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –¢–ï–°–¢–´:")
        exit_code_low = pytest.main([
            *existing_low_priority,
            '-v',
            '--tb=short',
            '--color=yes'
        ])
    else:
        exit_code_low = 0

    print(f"\n{'=' * 50}")
    if exit_code_high == 0 and exit_code_low == 0:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
    elif exit_code_high == 0:
        print("‚úÖ –í–´–°–û–ö–û–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
    else:
        print("üí• –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –í–´–°–û–ö–û–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–• –¢–ï–°–¢–ê–•")
    print(f"{'=' * 50}")

    return exit_code_high


if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    os.environ['FLASK_ENV'] = 'testing'

    sys.exit(run_tests())